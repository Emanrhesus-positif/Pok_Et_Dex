{
  "version": 3,
  "sources": ["../../telefunc/dist/esm/client/clientConfig.js", "../../telefunc/dist/esm/client/remoteTelefunctionCall/onAbort.js", "../../@brillout/json-serializer/dist/esm/types.js", "../../@brillout/json-serializer/dist/esm/parse.js", "../../telefunc/dist/esm/client/remoteTelefunctionCall/makeHttpRequest.js", "../../@brillout/json-serializer/dist/esm/utils/isReactElement.js", "../../@brillout/json-serializer/dist/esm/utils/isCallable.js", "../../@brillout/json-serializer/dist/esm/utils/isObject.js", "../../@brillout/json-serializer/dist/esm/utils/replacerWithPath.js", "../../@brillout/json-serializer/dist/esm/stringify.js", "../../telefunc/dist/esm/client/remoteTelefunctionCall/serializeTelefunctionArguments.js", "../../telefunc/dist/esm/client/remoteTelefunctionCall.js"],
  "sourcesContent": ["export { configUser as config };\r\nexport { resolveClientConfig };\r\nimport { assertUsage } from './utils';\r\nconst configUser = new Proxy({}, { set: validateUserConfig });\r\nfunction resolveClientConfig() {\r\n    var _a;\r\n    return {\r\n        httpHeaders: (_a = configUser.httpHeaders) !== null && _a !== void 0 ? _a : null,\r\n        telefuncUrl: configUser.telefuncUrl || '/_telefunc',\r\n    };\r\n}\r\nfunction validateUserConfig(configUserUnwrapped, prop, val) {\r\n    if (prop === 'telefuncUrl') {\r\n        assertUsage(typeof val === 'string', 'config.telefuncUrl should be a string');\r\n        const isIpAddress = (value) => /^\\d/.test(value);\r\n        assertUsage(val.startsWith('/') || val.startsWith('http') || isIpAddress(val), `config.telefuncUrl (client-side) is '${val}' but it should be one of the following: a URL pathname (such as '/_telefunc'), a URL with origin (such as 'https://example.org/_telefunc'), or an IP address (such as '192.158.1.38') â€” see https://telefunc.com/telefuncUrl`);\r\n        configUserUnwrapped[prop] = val;\r\n    }\r\n    else if (prop === 'httpHeaders') {\r\n        assertUsage(typeof val === 'object' && val !== null && Object.values(val).every((v) => typeof v === 'string'), '`config.httpHeaders` should be an object of strings');\r\n        configUserUnwrapped[prop] = val;\r\n    }\r\n    else {\r\n        assertUsage(false, `Unknown config.${prop}`);\r\n    }\r\n    return true;\r\n}\r\n", "export { onAbort };\r\nexport { callOnAbortListeners };\r\nexport { onTelefunctionRemoteCallError };\r\nimport { assertWarning } from '../utils';\r\n/** Outdated: use onAbort() instead */\r\nfunction onTelefunctionRemoteCallError(listener) {\r\n    assertWarning(false, 'onTelefunctionRemoteCallError() deprecated in favor of onAbort()', {\r\n        onlyOnce: true,\r\n        showStackTrace: true,\r\n    });\r\n    onAbort(listener);\r\n}\r\nfunction onAbort(listener) {\r\n    window.__telefunc_errorListeners = window.__telefunc_errorListeners || [];\r\n    window.__telefunc_errorListeners.push(listener);\r\n}\r\nfunction callOnAbortListeners(err) {\r\n    ;\r\n    (window.__telefunc_errorListeners || []).forEach((listener) => {\r\n        listener(err);\r\n    });\r\n}\r\n", "export { types };\r\nconst types = [\r\n    ts({\r\n        is: (val) => val === undefined,\r\n        match: (str) => str === '!undefined',\r\n        serialize: () => '!undefined',\r\n        deserialize: () => undefined,\r\n    }),\r\n    ts({\r\n        is: (val) => val === Infinity,\r\n        match: (str) => str === '!Infinity',\r\n        serialize: () => '!Infinity',\r\n        deserialize: () => Infinity,\r\n    }),\r\n    ts({\r\n        is: (val) => val === -Infinity,\r\n        match: (str) => str === '!-Infinity',\r\n        serialize: () => '!-Infinity',\r\n        deserialize: () => -Infinity,\r\n    }),\r\n    ts({\r\n        is: (val) => typeof val === 'number' && isNaN(val),\r\n        match: (str) => str === '!NaN',\r\n        serialize: () => '!NaN',\r\n        deserialize: () => NaN,\r\n    }),\r\n    ts({\r\n        is: (val) => val instanceof Date,\r\n        match: (str) => str.startsWith('!Date:'),\r\n        serialize: (val) => '!Date:' + val.toISOString(),\r\n        deserialize: (str) => new Date(str.slice('!Date:'.length)),\r\n    }),\r\n    ts({\r\n        is: (val) => typeof val === 'bigint',\r\n        match: (str) => str.startsWith('!BigInt:'),\r\n        serialize: (val) => '!BigInt:' + val.toString(),\r\n        deserialize: (str) => {\r\n            if (typeof BigInt === 'undefined') {\r\n                throw new Error('Your JavaScript environement does not support BigInt. Consider adding a polyfill.');\r\n            }\r\n            return BigInt(str.slice('!BigInt:'.length));\r\n        },\r\n    }),\r\n    ts({\r\n        is: (val) => val instanceof RegExp,\r\n        match: (str) => str.startsWith('!RegExp:'),\r\n        serialize: (val) => '!RegExp:' + val.toString(),\r\n        deserialize: (str) => {\r\n            str = str.slice('!RegExp:'.length);\r\n            // const args: string[] = str.match(/\\/(.*?)\\/([gimy])?$/)!\r\n            const args = str.match(/\\/(.*)\\/(.*)?/);\r\n            const pattern = args[1];\r\n            const flags = args[2];\r\n            return new RegExp(pattern, flags);\r\n        },\r\n    }),\r\n    ts({\r\n        is: (val) => val instanceof Map,\r\n        match: (str) => str.startsWith('!Map:'),\r\n        serialize: (val, serializer) => '!Map:' + serializer(Array.from(val.entries())),\r\n        deserialize: (str, deserializer) => new Map(deserializer(str.slice('!Map:'.length))),\r\n    }),\r\n    ts({\r\n        is: (val) => val instanceof Set,\r\n        match: (str) => str.startsWith('!Set:'),\r\n        serialize: (val, serializer) => '!Set:' + serializer(Array.from(val.values())),\r\n        deserialize: (str, deserializer) => new Set(deserializer(str.slice('!Set:'.length))),\r\n    }),\r\n    // Avoid collisions with the special strings defined above\r\n    ts({\r\n        is: (val) => typeof val === 'string' && val.startsWith('!'),\r\n        match: (str) => str.startsWith('!'),\r\n        serialize: (val) => '!' + val,\r\n        deserialize: (str) => str.slice(1),\r\n    }),\r\n];\r\n// Type check\r\nfunction ts(t) {\r\n    return t;\r\n}\r\n", "export { parse };\r\n// Used by Vike: https://github.com/vikejs/vike/blob/b4ba6b70e6bdc2e1f460c0d2e4c3faae5d0a733c/vike/shared/page-configs/serialize/parseConfigValuesSerialized.ts#L13\r\nexport { parseTransform };\r\nimport { types } from './types';\r\nfunction parse(str) {\r\n    // We don't use the reviver option in `JSON.parse(str, reviver)` because it doesn't support `undefined` values\r\n    const value = JSON.parse(str);\r\n    return parseTransform(value);\r\n}\r\nfunction parseTransform(value) {\r\n    if (typeof value === 'string') {\r\n        return reviver(value);\r\n    }\r\n    if (\r\n    // Also matches arrays\r\n    typeof value === 'object' &&\r\n        value !== null) {\r\n        Object.entries(value).forEach(([key, val]) => {\r\n            ;\r\n            value[key] = parseTransform(val);\r\n        });\r\n    }\r\n    return value;\r\n}\r\nfunction reviver(value) {\r\n    for (const { match, deserialize } of types) {\r\n        if (match(value)) {\r\n            return deserialize(value, parse);\r\n        }\r\n    }\r\n    return value;\r\n}\r\n", "export { makeHttpRequest };\r\nimport { parse } from '@brillout/json-serializer/parse';\r\nimport { assert, assertUsage, isObject, objectAssign } from '../utils';\r\nimport { callOnAbortListeners } from './onAbort';\r\nconst method = 'POST';\r\nconst STATUS_CODE_SUCCESS = 200;\r\nconst STATUS_CODE_ABORT = 403;\r\nconst STATUS_CODE_BUG = 500;\r\nconst STATUS_CODE_INVALID = 400;\r\nasync function makeHttpRequest(callContext) {\r\n    let response;\r\n    try {\r\n        response = await fetch(callContext.telefuncUrl, {\r\n            method,\r\n            body: callContext.httpRequestBody,\r\n            credentials: 'same-origin',\r\n            headers: {\r\n                ...callContext.httpHeaders,\r\n                'Content-Type': 'text/plain',\r\n            },\r\n        });\r\n    }\r\n    catch (_) {\r\n        const telefunctionCallError = new Error('No Server Connection');\r\n        objectAssign(telefunctionCallError, { isConnectionError: true });\r\n        throw telefunctionCallError;\r\n    }\r\n    const statusCode = response.status;\r\n    if (statusCode === STATUS_CODE_SUCCESS) {\r\n        const { ret } = await parseResponseBody(response, callContext);\r\n        const telefunctionReturn = ret;\r\n        return { telefunctionReturn };\r\n    }\r\n    else if (statusCode === STATUS_CODE_ABORT) {\r\n        const { ret } = await parseResponseBody(response, callContext);\r\n        const abortValue = ret;\r\n        const telefunctionCallError = new Error(`Aborted telefunction call ${callContext.telefunctionName}() (${callContext.telefuncFilePath}).`);\r\n        objectAssign(telefunctionCallError, { isAbort: true, abortValue });\r\n        callOnAbortListeners(telefunctionCallError);\r\n        throw telefunctionCallError;\r\n    }\r\n    else if (statusCode === STATUS_CODE_BUG) {\r\n        const responseBody = await response.text();\r\n        const errMsg = 'Internal Server Error';\r\n        assertUsage(responseBody === errMsg, installErr({\r\n            reason: 'an HTTP response body that Telefunc never generates',\r\n            method,\r\n            callContext,\r\n        }));\r\n        throw new Error(errMsg);\r\n    }\r\n    else if (statusCode === STATUS_CODE_INVALID) {\r\n        const responseBody = await response.text();\r\n        assertUsage(responseBody === 'Invalid Telefunc Request', installErr({\r\n            reason: 'an HTTP response body that Telefunc never generates',\r\n            method,\r\n            callContext,\r\n        }));\r\n        /* With Next.js 12: when renaming a `.telefunc.js` file the client makes a request with the new `.telefunc.js` name while the server is still serving the old `.telefunc.js` name. Seems like a race condition: trying again seems to fix the error.\r\n        // This should never happen as the Telefunc Client shouldn't make invalid requests\r\n        assert(false)\r\n        */\r\n        assertUsage(false, 'Try again. You may need to reload the page. (The client and server are/was out-of-sync.)');\r\n    }\r\n    else {\r\n        assertUsage(statusCode !== 404, installErr({\r\n            reason: 'a 404 HTTP response',\r\n            method,\r\n            isNotInstalled: true,\r\n            callContext,\r\n        }));\r\n        assertUsage(false, installErr({\r\n            reason: `a status code \\`${statusCode}\\` which Telefunc never uses`,\r\n            method,\r\n            callContext,\r\n        }));\r\n    }\r\n}\r\nasync function parseResponseBody(response, callContext) {\r\n    const responseBody = await response.text();\r\n    const responseBodyParsed = parse(responseBody);\r\n    assertUsage(isObject(responseBodyParsed) && 'ret' in responseBodyParsed, installErr({\r\n        reason: 'an HTTP response body that Telefunc never generates',\r\n        method,\r\n        callContext,\r\n    }));\r\n    assert(response.status !== STATUS_CODE_ABORT || 'abort' in responseBodyParsed);\r\n    const { ret } = responseBodyParsed;\r\n    return { ret };\r\n}\r\nfunction installErr({ reason, callContext, method, isNotInstalled, }) {\r\n    let msg = [`Telefunc doesn't seem to be `];\r\n    if (!isNotInstalled) {\r\n        msg.push('(properly) ');\r\n    }\r\n    msg.push('installed on your server');\r\n    if (reason) {\r\n        msg.push(...[`: the HTTP ${method} \\`${callContext.telefuncUrl}\\` request returned `, reason]);\r\n    }\r\n    msg.push(`, see https://telefunc.com/install`);\r\n    return msg.join('');\r\n}\r\n", "export function isReactElement(value) {\r\n    return (typeof value === 'object' &&\r\n        value !== null &&\r\n        String(value['$$typeof']) === 'Symbol(react.element)');\r\n}\r\n", "export function isCallable(thing) {\r\n    return thing instanceof Function || typeof thing === 'function';\r\n}\r\n", "export { isObject };\r\nfunction isObject(value) {\r\n    if (typeof value !== 'object' || value === null) {\r\n        return false;\r\n    }\r\n    if (Array.isArray(value)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n", "export { replacerWithPath };\r\nfunction replacerWithPath(replacer) {\r\n    const pathMap = new WeakMap();\r\n    return function (key, value) {\r\n        const pathPrevious = pathMap.get(this) ?? [];\r\n        const path = [...pathPrevious];\r\n        if (key !== '') {\r\n            const pathEntry = !Array.isArray(this) ? key : parseInt(key, 10);\r\n            path.push(pathEntry);\r\n        }\r\n        if (isIterable(value))\r\n            pathMap.set(value, path);\r\n        return replacer.call(this, key, value, path);\r\n    };\r\n}\r\nfunction isIterable(value) {\r\n    return value === Object(value);\r\n}\r\n", "export { stringify };\r\nexport { isJsonSerializerError };\r\nimport { types } from './types';\r\nimport { isReactElement } from './utils/isReactElement';\r\nimport { isCallable } from './utils/isCallable';\r\nimport { isObject } from './utils/isObject';\r\nimport { replacerWithPath } from './utils/replacerWithPath';\r\nfunction stringify(value, { forbidReactElements, space, valueName, sortObjectKeys, \r\n// Used by Vike: https://github.com/vikejs/vike/blob/b4ba6b70e6bdc2e1f460c0d2e4c3faae5d0a733c/vike/node/plugin/plugins/importUserCode/v1-design/getConfigValuesSerialized.ts#L78\r\nreplacer: replacerUserProvided, } = {}) {\r\n    // The only error `JSON.stringify()` can throw is `TypeError \"cyclic object value\"`.\r\n    // - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#exceptions\r\n    // - This means we have total of 3 possible errors while serializing:\r\n    //    - Cyclic references\r\n    //    - Functions\r\n    //    - React elements\r\n    const serializer = (val) => JSON.stringify(val, replacerWithPath(replacer), space);\r\n    return serializer(value);\r\n    function replacer(key, value, path) {\r\n        {\r\n            const ret = replacerUserProvided?.call(this, key, value);\r\n            if (ret)\r\n                return ret.replacement;\r\n        }\r\n        if (forbidReactElements && isReactElement(value)) {\r\n            throw genErr({\r\n                value,\r\n                valueType: 'React element',\r\n                path,\r\n                rootValueName: valueName,\r\n            });\r\n        }\r\n        if (isCallable(value)) {\r\n            const functionName = value.name;\r\n            throw genErr({\r\n                value,\r\n                valueType: 'function',\r\n                path,\r\n                rootValueName: valueName,\r\n                problematicValueName: path.length === 0 ? functionName : undefined,\r\n            });\r\n        }\r\n        const valueOriginal = this[key];\r\n        for (const { is, serialize } of types.slice().reverse()) {\r\n            if (is(valueOriginal)) {\r\n                //@ts-ignore\r\n                return serialize(valueOriginal, serializer);\r\n            }\r\n        }\r\n        if (sortObjectKeys && isObject(value)) {\r\n            const copy = {};\r\n            Object.keys(value)\r\n                .sort()\r\n                .forEach((key) => {\r\n                copy[key] = value[key];\r\n            });\r\n            value = copy;\r\n        }\r\n        return value;\r\n    }\r\n}\r\nfunction genErr({ value, valueType, path, rootValueName, problematicValueName, }) {\r\n    const subjectName = getSubjectName({ path, rootValueName, problematicValueName });\r\n    const messageCore = `cannot serialize ${subjectName} because it's a ${valueType}`;\r\n    const err = new Error(`[@brillout/json-serializer](https://github.com/brillout/json-serializer) ${messageCore}.`);\r\n    const pathString = getPathString(path, true);\r\n    const errAddendum = {\r\n        [stamp]: true,\r\n        messageCore,\r\n        value,\r\n        path,\r\n        pathString,\r\n        subjectName,\r\n    };\r\n    Object.assign(err, errAddendum);\r\n    return err;\r\n}\r\nconst stamp = '_isJsonSerializerError';\r\nfunction isJsonSerializerError(thing) {\r\n    return isObject(thing) && thing[stamp] === true;\r\n}\r\nfunction getSubjectName({ path, rootValueName, problematicValueName, }) {\r\n    const pathString = getPathString(path, !rootValueName);\r\n    let subjectName;\r\n    if (!pathString) {\r\n        subjectName = rootValueName || problematicValueName || 'value';\r\n    }\r\n    else {\r\n        if (problematicValueName) {\r\n            subjectName = problematicValueName + ' at ';\r\n        }\r\n        else {\r\n            subjectName = '';\r\n        }\r\n        subjectName = subjectName + (rootValueName || '') + pathString;\r\n    }\r\n    return subjectName;\r\n}\r\nfunction getPathString(path, canBeFirstKey) {\r\n    const pathString = path\r\n        .map((key, i) => {\r\n        if (typeof key === 'number') {\r\n            return `[${key}]`;\r\n        }\r\n        if (i === 0 && canBeFirstKey && isKeyDotNotationCompatible(key)) {\r\n            return key;\r\n        }\r\n        return getPropAccessNotation(key);\r\n    })\r\n        .join('');\r\n    return pathString;\r\n}\r\nfunction getPropAccessNotation(key) {\r\n    return typeof key === 'string' && isKeyDotNotationCompatible(key) ? `.${key}` : `[${JSON.stringify(key)}]`;\r\n}\r\nfunction isKeyDotNotationCompatible(key) {\r\n    return /^[a-z0-9\\$_]+$/i.test(key);\r\n}\r\n", "export { serializeTelefunctionArguments };\r\nimport { stringify } from '@brillout/json-serializer/stringify';\r\nimport { assert, assertUsage, lowercaseFirstLetter, hasProp } from '../utils';\r\nfunction serializeTelefunctionArguments(callContext) {\r\n    const bodyParsed = {\r\n        file: callContext.telefuncFilePath,\r\n        name: callContext.telefunctionName,\r\n        args: callContext.telefunctionArgs,\r\n    };\r\n    assert(typeof callContext.telefuncFilePath === 'string');\r\n    assert(typeof callContext.telefunctionName === 'string');\r\n    assert(Array.isArray(callContext.telefunctionArgs));\r\n    let httpRequestBody;\r\n    try {\r\n        httpRequestBody = stringify(bodyParsed, { forbidReactElements: true });\r\n    }\r\n    catch (err) {\r\n        assert(hasProp(err, 'message', 'string'));\r\n        assertUsage(false, [\r\n            `Cannot serialize arguments for telefunction ${callContext.telefunctionName}() (${callContext.telefuncFilePath}).`,\r\n            'Make sure that the arguments pass to telefunction calls are always serializable.',\r\n            `Serialization error: ${lowercaseFirstLetter(err.message)}`,\r\n        ].join(' '));\r\n    }\r\n    assert(httpRequestBody);\r\n    return httpRequestBody;\r\n}\r\n", "export { remoteTelefunctionCall };\r\nimport { makeHttpRequest } from './remoteTelefunctionCall/makeHttpRequest';\r\nimport { serializeTelefunctionArguments } from './remoteTelefunctionCall/serializeTelefunctionArguments';\r\nimport { resolveClientConfig } from './clientConfig';\r\nimport { objectAssign, assertUsage, isBrowser } from './utils';\r\nasync function remoteTelefunctionCall(telefuncFilePath, telefunctionName, telefunctionArgs) {\r\n    assertUsage(isBrowser(), 'The Telefunc Client is meant to be run only in the browser.');\r\n    const callContext = {};\r\n    {\r\n        objectAssign(callContext, {\r\n            telefuncFilePath,\r\n            telefunctionName,\r\n            telefunctionArgs,\r\n        });\r\n    }\r\n    objectAssign(callContext, resolveClientConfig());\r\n    {\r\n        const httpRequestBody = serializeTelefunctionArguments(callContext);\r\n        objectAssign(callContext, { httpRequestBody });\r\n    }\r\n    const { telefunctionReturn } = await makeHttpRequest(callContext);\r\n    return telefunctionReturn;\r\n}\r\n"],
  "mappings": "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",
  "names": ["method", "isObject", "value", "isObject", "key"]
}
